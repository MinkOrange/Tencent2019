# -*- coding: utf-8 -*-

# 小Q正在爬一座宝塔，宝塔共有n层，每层之间的净高不同，所以小Q爬过每层的时间也不同。
# 如果某一层的高度为x，那么小Q爬的时间也是x。小Q还会使用一种魔法，每次可以让他向上跳
# 一层或者两层，但是每次跳完之后，小Q都将用尽魔法，需要爬过至少一层之后才能再次跳跃。
# 最后也可以跳到塔外，即超过塔高，就是不消耗时间的。小Q希望能用最短的时间爬到塔顶，
# 希望你告诉他最短时间是多少。
#
# 【输入描述】
# 第一行一个数n，表示塔的层数。(n <= 10000)
# 接下来的每一行表示一个数h(1 <= h <= 100)，表示从下往上每层的高度：
#
# 输入：
# 5
# 3
# 5
# 1
# 8
# 4
#
# 输出：
# 1

def plan(t):
    count = 0
    if len(t) < 3:
        return 0
    if t[0] < t[1] and t[0] < t[2]: # 爬一层最好
        count += t[0]
        return count + plan(t[1:])
    if t[1] <= t[0] and t[1] < t[2]: # 跳一层最好
        count += t[1]
        return count + plan(t[2:])
    if t[2] <= t[0] and t[2] <= t[1]: # 跳两层最好
        count += t[2]
        return count + plan(t[3:])

if __name__ == '__main__':
    print(plan([3, 5, 1, 1, 1, 10, 20, 80, 20, 30, 40]))
